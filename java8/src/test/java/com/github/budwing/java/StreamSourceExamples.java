package com.github.budwing.java;

import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Four major source:
 * 1. Collection
 * 2. Array
 * 3. Stream factory method
 * 4. IO
 */
@Slf4j
public class StreamSourceExamples {
    /**
     * 1. Collection
     *
     * Collection.stream is an important stream source from collections.
     * Collection.parallelStream can obtain the stream which supported parallel operations.
     * Besides these two methods, Collection.spliterator can be used to get Spliterator.
     */
    @Test
    public void examplesForCollectionStream() {
        Collection<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("Lambda");
        collection.add("and");
        collection.add("Stream");
        Optional<Integer> optional = collection.stream()
                .map(String::length)
                .reduce((a, b) -> a + b);
        log.info("total string length in collection is {}.", optional.get());
    }

    /**
     * 2. Array
     *
     * Arrays.stream is a stream source from arrays. It has override method for primitive types such as long, int and double.
     * They will return LongStream, IntStream and DoubleStream respectively.
     */
    @Test
    public void examplesForArrays() {
        int sum = Arrays.stream(new int[]{1,2,3,4,5,6,7,8,9}).sum();
        log.info("accumulate 1-9: {}", sum);
    }

    /**
     * 3.1 Stream.generate()
     *
     * Stream.generate returns an infinite sequential unordered stream where each element is generated by the provided Supplier
     */
    @Test
    public void examplesForStreamGenerate() {
        Executors.newSingleThreadScheduledExecutor()
                        .schedule(()->System.exit(0), 10, TimeUnit.MILLISECONDS);
        Stream.generate(()->System.currentTimeMillis()).forEach(System.out::println);
    }

    /**
     * 3.2 Stream.iterate()
     *
     * infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed
     */
    @Test
    public void examplesForStreamIterate() {
        Executors.newSingleThreadScheduledExecutor()
                .schedule(()->System.exit(0), 10, TimeUnit.MILLISECONDS);
        Stream.iterate(1, t->t+2).forEach(System.out::println);
    }

    /**
     * 3.3 Stream.of()
     *
     * sequential ordered stream whose elements are the specified values
     */
    @Test
    public void examplesForStreamOf() {
        int length = Stream.of("An","example","for","stream.of")
                .map(String::length)
                .reduce((a,b)->a+b)
                .get();
        log.info("total string length of the stream: {}", length);
    }
    /**
     * 3.4 IntStream.range() and rangeClosed(), LongStream.range() and rangeClosed() ===> ordered sequential stream
     *
     *     Random.ints(), longs() and doubles() ===> unordered stream
     */
    @Test
    public void examplesForIntStream() {
        int sum = IntStream.range(1,101)
                .parallel()
                .sum();
        log.info("accumulate from 1 to 100, result is {}", sum);

        Executors.newSingleThreadScheduledExecutor()
                .schedule(()->System.exit(0), 10, TimeUnit.MILLISECONDS);
        Random r = new Random(System.currentTimeMillis());
        r.ints(100,200)
                .forEach(System.out::println);
    }
    /**
     * 4.1 IO - BufferedReader.lines() ===> ordered
     */
    @Test
    public void examplesForBufferedReader() {
        BufferedReader br = new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("logback.xml")));
        long lines = br.lines()
                .count();
        log.info("lines in logback.xml: {}", lines);
        br = new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("logback.xml")));
    }

    /**
     * 4.2 IO - Files.list(),find() and walk() ===> Stream<Path> unordered
     *          Files.lines() ===>Stream<String> ordered
     */
    @Test
    public void examplesForFiles() throws IOException {
        Files.list(Paths.get(".")).forEach(System.out::println);
        Files.find(Paths.get("."), 100, (p, b) -> b.isDirectory()).forEach(System.out::println);
        Files.lines(Paths.get("F:\\projects\\training\\java-new-feature","README.md"))
                .forEach(System.out::println);
    }
}
